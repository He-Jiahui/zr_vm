//
// Created by HeJiahui on 2025/6/5.
//

#ifndef ZR_TYPE_CONF_H
#define ZR_TYPE_CONF_H


#include "zr_vm_common/zr_common_conf.h"

//
enum EZrValueType {
    ZR_VALUE_TYPE_NULL,
    ZR_VALUE_TYPE_BOOL,
    ZR_VALUE_TYPE_INT8,
    ZR_VALUE_TYPE_INT16,
    ZR_VALUE_TYPE_INT32,
    ZR_VALUE_TYPE_INT64,
    ZR_VALUE_TYPE_UINT8,
    ZR_VALUE_TYPE_UINT16,
    ZR_VALUE_TYPE_UINT32,
    ZR_VALUE_TYPE_UINT64,
    ZR_VALUE_TYPE_FLOAT,
    ZR_VALUE_TYPE_DOUBLE,
    ZR_VALUE_TYPE_STRING,
    ZR_VALUE_TYPE_BUFFER,
    ZR_VALUE_TYPE_ARRAY,
    ZR_VALUE_TYPE_FUNCTION,
    ZR_VALUE_TYPE_OBJECT,
    ZR_VALUE_TYPE_NATIVE_POINTER,
    ZR_VALUE_TYPE_NATIVE_DATA,
    ZR_VALUE_TYPE_THREAD,


    ZR_VALUE_TYPE_VM_MEMORY,
    ZR_VALUE_TYPE_UNKNOWN,
    ZR_VALUE_TYPE_ENUM_MAX
};

typedef enum EZrValueType EZrValueType;

#define ZR_VALUE_IS_TYPE_NULL(valueType) ((valueType) == ZR_VALUE_TYPE_NULL)
#define ZR_VALUE_IS_TYPE_BOOL(valueType) ((valueType) == ZR_VALUE_TYPE_BOOL)
#define ZR_VALUE_IS_TYPE_SIGNED_INT(valueType) ((valueType) >= ZR_VALUE_TYPE_INT8 && (valueType) <= ZR_VALUE_TYPE_INT64)
#define ZR_VALUE_IS_TYPE_UNSIGNED_INT(valueType) ((valueType) >= ZR_VALUE_TYPE_UINT8 && (valueType) <= ZR_VALUE_TYPE_UINT64)
#define ZR_VALUE_IS_TYPE_INT(valueType) (ZR_VALUE_IS_TYPE_SIGNED_INT(valueType) || ZR_VALUE_IS_TYPE_UNSIGNED_INT(valueType))
#define ZR_VALUE_IS_TYPE_FLOAT(valueType) ((valueType) >= ZR_VALUE_TYPE_FLOAT && (valueType) <= ZR_VALUE_TYPE_DOUBLE)
#define ZR_VALUE_IS_TYPE_NUMBER(valueType) (ZR_VALUE_IS_TYPE_INT(valueType) || ZR_VALUE_IS_TYPE_FLOAT(valueType))
#define ZR_VALUE_IS_TYPE_STRING(valueType) ((valueType) == ZR_VALUE_TYPE_STRING)
#define ZR_VALUE_IS_TYPE_NATIVE(valueType) ((valueType) == ZR_VALUE_TYPE_NATIVE_POINTER || (valueType) == ZR_VALUE_TYPE_NATIVE_DATA)

#define ZR_VALUE_IS_TYPE_BASIC(valueType) (((valueType) >= ZR_VALUE_TYPE_NULL && (valueType) <= ZR_VALUE_TYPE_STRING) || ZR_VALUE_IS_TYPE_NATIVE(valueType))

#define ZR_VALUE_CASES_SIGNED_INT \
    case ZR_VALUE_TYPE_INT8: \
    case ZR_VALUE_TYPE_INT16: \
    case ZR_VALUE_TYPE_INT32: \
    case ZR_VALUE_TYPE_INT64:

#define ZR_VALUE_CASES_UNSIGNED_INT \
    case ZR_VALUE_TYPE_UINT8: \
    case ZR_VALUE_TYPE_UINT16: \
    case ZR_VALUE_TYPE_UINT32: \
    case ZR_VALUE_TYPE_UINT64:

#define ZR_VALUE_CASES_INT \
    ZR_VALUE_CASES_SIGNED_INT \
    ZR_VALUE_CASES_UNSIGNED_INT

#define ZR_VALUE_CASES_FLOAT \
    case ZR_VALUE_TYPE_FLOAT: \
    case ZR_VALUE_TYPE_DOUBLE:

#define ZR_VALUE_CASES_NUMBER \
    ZR_VALUE_CASES_INT \
    ZR_VALUE_CASES_FLOAT

#define ZR_VALUE_CASES_NATIVE  \
    case ZR_VALUE_TYPE_NATIVE_POINTER: \
    case ZR_VALUE_TYPE_NATIVE_DATA:

enum EZrIoModuleDeclareType {
    ZR_IO_MODULE_DECLARE_TYPE_CLASS,
    ZR_IO_MODULE_DECLARE_TYPE_STRUCT,
    ZR_IO_MODULE_DECLARE_TYPE_INTERFACE,
    ZR_IO_MODULE_DECLARE_TYPE_FUNCTION,

    ZR_IO_MODULE_DECLARE_TYPE_ENUM_MAX
};

typedef enum EZrIoModuleDeclareType EZrIoModuleDeclareType;

enum EZrIoClassDeclareType {
    ZR_IO_CLASS_DECLARE_TYPE_MEMBER,
    ZR_IO_CLASS_DECLARE_TYPE_PROPERTY,
    ZR_IO_CLASS_DECLARE_TYPE_FUNCTION,
    ZR_IO_CLASS_DECLARE_TYPE_META,

    ZR_IO_CLASS_DECLARE_TYPE_ENUM_MAX
};

typedef enum EZrIoClassDeclareType EZrIoClassDeclareType;
#endif //ZR_TYPE_CONF_H
